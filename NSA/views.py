from ssl import AlertDescription
from urllib import request
from django.shortcuts import render,redirect
from django.http import HttpResponse , JsonResponse
from django.contrib.auth.models import User,auth
from django.contrib import messages
from .forms import RulesForm 
from .models import Rules  
import os
import random
import smtplib
import requests
import urllib3
import certifi

from django.http import FileResponse


import socket
import subprocess





def port_scan_result(request):
    target = request.POST.get('target')
    port_range = request.POST.get('port_range')
    start_port, end_port = port_range.split("-")

    try:
        output = subprocess.check_output(['uname', '-a'])
        os = output.decode().strip()
    except:
        os = None

    open_ports = []
    for port in range(int(start_port), int(end_port)+1):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.1)
        result = s.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
        s.close()

    context = {
        'target': target,
        'port_range': port_range,
        'os': os,
        'open_ports': open_ports,
    }
    return render(request, 'port_scan_result.html', context)

def port_scan(request):
    # Form gönderildiğinde
    if request.method == 'POST':
        # Hedef IP adresi ve port aralığını al
        target = request.POST.get('target')
        port_range = request.POST.get('port_range')
        start_port, end_port = port_range.split('-')

        # İşletim sistemi tespiti
        try:
            output = subprocess.check_output(shell=True)
            os = output.decode()
        except:
            os = ""

        # Port taraması
        open_ports = []
        for port in range(int(start_port), int(end_port)+1):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(0.1)
            result = s.connect_ex((target, port))
            if result == 0:
                open_ports.append(port)
            s.close()

        # Sonuçları ekrana yazdır
        context = {
            'target': target,
            'port_range': port_range,
            'os': os,
            'open_ports': open_ports
        }
        return render(request, 'port_scan_result.html', context)

    # Form gönderilmediğinde
    return render(request, 'port_scan.html')

'''INDEX SEHIFESI'''
def index(request):
    return render(request, 'index.html')

'''REGISTER SEHIFESI'''
def register(request):
    if request.method == 'POST':
        register.username = request.POST['username']
        register.email = request.POST['email']
        register.password = request.POST['password']
        register.password2 = request.POST['password2']

        if register.password == register.password2:
            if User.objects.filter(username=register.username).exists():
                messages.info(request, 'Usarname already in use')
                return redirect('register')   
            elif User.objects.filter(email=register.email).exists():
                messages.info(request, 'Email already in use')
                return redirect('register')
        else:
            messages.info(request, 'Passwords must be same') 
            return redirect('register')
        user = User.objects.create_user(username=register.username,email=register.email,password=register.password)    
        user.save()        
        return redirect('login')                   
    else:
        return render(request, 'register.html')


'''LOGIN SEHIFESI'''
def login(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']

        user = auth.authenticate(username=username,password=password)
        if user is not None:
            auth.login(request, user)
            return redirect('home')
        else:
            messages.info(request, 'Username or Password is incorrect')    
            return redirect('login')
    return render(request, 'login.html')

import win32com.shell.shell as shell

'''HOME SEHIFESI'''

def home(request):

    return render(request, 'home.html')


    
'''LOGOUT'''
def logout(request):
    auth.logout(request)
    return redirect('login')

'''RULE-UN SILINMESI'''
def destroy(request, id):  
    rule = Rules.objects.get(id=id)  
    rule.delete()  
    return redirect("/home")  

'''404 SEHIFESI'''
def custom_page_not_found_view(request, exception):
    return render(request, "404.html", {})

'''505 SEHIFESI'''
def custom_500_error(request):
    return render(request, "500.html", {})

def report_view(request):
    # Burada, report.html dosyasının konumunu belirtin.
    report_file = open('templates/report.html', 'rb')
    response = FileResponse(report_file)
    response['Content-Disposition'] = 'attachment; filename="report.html"'
    return response
    
    
